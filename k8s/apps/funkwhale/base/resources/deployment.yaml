---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: funkwhale-beat
  labels:
    app.kubernetes.io/name: funkwhale
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
  template:
    metadata:
      labels:
        app.kubernetes.io/name: funkwhale
    spec:
      containers:
        - name: celery-beat
          image: "funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              celery -A funkwhale_api.taskapp beat -l INFO
          env:
            - name: POSTGRES_ENV_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
            - name: POSTGRES_ENV_POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: username
          envFrom:
          - configMapRef:
              name: funkwhale
          - secretRef:
              name: funkwhale
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 10m
              memory: 75Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: funkwhale-worker
  labels:
    app.kubernetes.io/name: funkwhale
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
  template:
    metadata:
      labels:
        app.kubernetes.io/name: funkwhale
    spec:
      containers:
        - name: worker
          image: "funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              celery -A funkwhale_api.taskapp worker -l INFO
          env:
            - name: C_FORCE_ROOT
              value: "true"
            - name: POSTGRES_ENV_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
            - name: POSTGRES_ENV_POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: username
          envFrom:
          - configMapRef:
              name: funkwhale
          - secretRef:
              name: funkwhale
          volumeMounts:
            - mountPath: /srv/funkwhale/data/music
              name: data
              subPath: Music
          resources:
            {}
      volumes:
        - name: config
          configMap:
            name: funkwhale-front
        - name: data
          persistentVolumeClaim:
            claimName: funkwhale-media
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: funkwhale
  labels:
    app.kubernetes.io/name: funkwhale
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: funkwhale
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: funkwhale
        app.kubernetes.io/component: app
    spec:
      containers:
        - name: funkwhale
          image: "funkwhale/api:1.4.0"
          imagePullPolicy: IfNotPresent
          readinessProbe:

            httpGet:
              path: /
              port: api
              scheme: HTTP
          livenessProbe:

            httpGet:
              path: /
              port: api
              scheme: HTTP
          startupProbe:

            tcpSocket:
              port: api
          env:
            - name: POSTGRES_ENV_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
            - name: POSTGRES_ENV_POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: username
          envFrom:
          - configMapRef:
              name: funkwhale
          - secretRef:
              name: funkwhale
          volumeMounts:
            - mountPath: /srv/funkwhale/data/
              name: data
            - mountPath: /srv/funkwhale/data/static/
              name: static
          ports:
            - name: api
              containerPort: 5000
              protocol: TCP
          resources:
            {}
        - name: nginx
          image: "funkwhale/front:1.4.0"
          imagePullPolicy: IfNotPresent
          env:
          - name: FUNKWHALE_API_HOST
            value: localhost
          - name: FUNKWHALE_API_PORT
            value: '5000'
          envFrom:
          - configMapRef:
              name: funkwhale
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:

            httpGet:
              path: /
              port: http
              scheme: HTTP
          readinessProbe:

            httpGet:
              path: /
              port: http
              scheme: HTTP
          startupProbe:

            tcpSocket:
              port: http
          volumeMounts:
            - mountPath: /srv/funkwhale/data/
              name: data
            - mountPath: /srv/funkwhale/data/music/
              name: music
              subPath: Music
            - mountPath: /usr/share/nginx/html/staticfiles
              name: static
              readOnly: true
      volumes:
        - name: static
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: funkwhale-data
        - name: music
          persistentVolumeClaim:
            claimName: funkwhale-media
