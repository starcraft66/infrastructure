nput {
    beats {
        port => "5044"
    }
}
filter {
    if [beat][name] == "lancache" {

        # ACCESS LOG
        if [source] =~ "access" {
            mutate { add_tag => "lancache-access" }

            # Extract basic access log fields
            grok {
                match => { "message" => "\[%{HTTPDATE:timestamp}\] %{IPORHOST:client_ip} %{WORD:http_verb} \"%{URIPATH:url_path}%{URIPARAM:url_querystring}?\" (bytes=%{INT:range_start}-%{INT:range_end}|-) (bytes=%{INT:slice_range_start}-%{INT:slice_range_end}|-) %{NUMBER:http_status_code} (?:%{NUMBER:bytes}|-) (?:%{NUMBER:upstream_bytes_received}|-) (?:%{WORD:cache_status}|-) %{HOSTNAME:upstream_server} (?:%{NUMBER:upstream_http_status_code}|-) (?:%{NUMBER:upstream_response_time}|-) %{QUOTEDSTRING:user_agent}" }
            }
            mutate { convert => { "bytes" => "integer" } }
            mutate { convert => { "upstream_bytes_received" => "integer" } }
            mutate { convert => { "upstream_response_time" => "float" } }
            mutate { convert => { "range_start" => "integer" } }
            mutate { convert => { "range_end" => "integer" } }
            mutate { convert => { "slice_range_start" => "integer" } }
            mutate { convert => { "slice_range_end" => "integer" } }

        # ERROR LOG
        } else if [source] =~ "error" {
            mutate { add_tag => "lancache-error" }

            grok {
                match => { "message" => "(?<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[%{DATA:error_severity}\] %{NOTSPACE} %{NOTSPACE} (?<error_message>(.|\r|\n)*)(?:, client: (?<client_ip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server_name})(?:, request: \"%{WORD:http_verb} %{URIPATH:url_path}%{URIPARAM:url_querystring}? HTTP/%{NUMBER:http_version}\")?(?:, host: %{QS:nginx_host})?(?:, referrer: \"%{URI:referrer})?" }
            }

        # UNKNOWN LOG
        } else {
            mutate { add_tag => "lancache-unknown" }
        }

        # STEAM
        if [source] =~ "steam" {
            mutate { replace => { upstream => "steam" } }

            if "lancache-access" in [tags] {

                # STEAM ID
                if [url_querystring] =~ "sid=" {
                    grok {
                      match => { "url_querystring" => "sid=%{INT:steam_id_3}" }
                    }
                }

                # DEPOT ID
                if [url_path] =~ "^\/depot" {
                    grok {
                        match => { "url_path" => "/depot/%{INT:steam_depot_id}/" }
                    }

                    # CHUNK ID
                    if [url_path] =~ "^\/depot\/\d*\/chunk\/" {
                        grok {
                            match => { "url_path" => "chunk/%{BASE16NUM:steam_chunk_id}"}
                        }
                    }

                    # MANIFEST ID
                    if [url_path] =~ "^\/depot\/\d*\/manifest\/" {
                        grok {
                            match => { "url_path" => "manifest/%{BASE16NUM:steam_manifest_id}"}
                        }
                    }
                }
            }

        # BLIZZARD
        } else if [source] =~ "blizzard" {
            mutate { replace => { upstream => "blizzard" } }

        # RIOT
        } else if [source] =~ "riot" {
            mutate { replace => { upstream => "riot" } }

        # WINUPDATE
        } else if [source] =~ "winupdate" {
            mutate { replace => { upstream => "winupdate" } }

        # SONY
        } else if [source] =~ "sony" {
            mutate { replace => { upstream => "sony" } }

        # ORIGIN
        } else if [source] =~ "origin" {
            mutate { replace => { upstream => "origin" } }

        # UNKNOWN
        } else {
            mutate { replace => { upstream => "unknown" } }
        }

    }
    date {
        match => [ "timestamp",  "dd/MMM/yyyy:HH:mm:ss Z"]
        remove_field => [ "timestamp" ]
    }
}